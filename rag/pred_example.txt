SELECT COUNT(*) FROM concert_singer.singer	concert_singer
SELECT COUNT(Singer_ID) AS Total_Number_Of_Singers FROM singer	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'	concert_singer
SELECT AVG(s.Age) AS Average_Age, MIN(s.Age) AS Minimum_Age, MAX(s.Age) AS Maximum_Age FROM singer s WHERE s.Country = 'France'	concert_singer
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)	concert_singer
SELECT Name, Song_release_year FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Age = (SELECT MIN(Age) FROM singer)	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country	concert_singer
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country	concert_singer
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)	concert_singer
SELECT s.Song_Name FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Age > (SELECT AVG(Age) FROM singer)	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT Location, Name FROM concert_singer.stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM concert_singer.stadium	concert_singer
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015	concert_singer
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM concert_singer.stadium s LEFT JOIN concert_singer.concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name	concert_singer
SELECT s.Stadium_ID, s.Name, COUNT(c.concert_ID) AS num_concerts FROM concert_singer.stadium s LEFT JOIN concert_singer.concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name	concert_singer
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1	concert_singer
SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) ||| concert_singer
SELECT Year, COUNT(concert_ID) AS Num_Concerts FROM concert GROUP BY Year ORDER BY Num_Concerts DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	concert_singer
SELECT DISTINCT s1.Country FROM singer s1, singer s2 WHERE s1.Age > 40 AND s2.Age < 30	concert_singer
SELECT Name FROM concert_singer.stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID  FROM concert_singer.concert  WHERE Year = 2014)	concert_singer
SELECT Name FROM concert_singer.stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert_singer.concert WHERE Year = 2014)	concert_singer
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS num_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme	concert_singer
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS number_of_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme	concert_singer
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	concert_singer
SELECT s.Name, COUNT(sic.Singer_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	concert_singer
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014	concert_singer
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014	concert_singer
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'	concert_singer
SELECT Name, Country FROM concert_singer.singer WHERE Song_Name LIKE '%Hey%'	concert_singer
SELECT s.Name, s.Location FROM concert_singer.stadium s INNER JOIN concert_singer.concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 AND s.Stadium_ID IN (SELECT s.Stadium_ID FROM concert_singer.concert c WHERE c.Year = 2015) 	concert_singer
SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE Year = 2015)	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity)  FROM stadium))	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	concert_singer
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT COUNT(*) FROM pets_1.Pets WHERE weight > 10	pets_1
SELECT MIN(weight) FROM Dogs	pets_1
SELECT MIN(weight) FROM Pets	pets_1
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType	pets_1
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType	pets_1
SELECT COUNT(PetID) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)	pets_1
SELECT COUNT(Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20	pets_1
SELECT COUNT(*) FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F'	pets_1
SELECT COUNT(DISTINCT P.PetID) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE S.Sex = 'Female'	pets_1
SELECT COUNT(DISTINCT PetType) AS num_distinct_pet_types FROM Pets	pets_1
SELECT COUNT(DISTINCT PetType) AS NumberOfPetTypes FROM Pets	pets_1
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog')	pets_1
SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))	pets_1
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog') GROUP BY S.StuID HAVING COUNT(DISTINCT P.PetType) = 2	pets_1
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))	pets_1
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))	pets_1
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))	pets_1
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))	pets_1
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets pt ON hp.PetID = pt.PetID WHERE pt.PetType = 'dog' AND s.StuID NOT IN (SELECT s2.StuID FROM Student s2 JOIN Has_Pet hp2 ON s2.StuID = hp2.StuID JOIN Pets pt2 ON hp2.PetID = pt2.PetID WHERE pt2.PetType = 'cat')	pets_1
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType	pets_1
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith'	pets_1
SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')	pets_1
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID	pets_1
SELECT StuID, COUNT(PetID) AS num_pets FROM Has_Pet GROUP BY StuID	pets_1
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)	pets_1
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)	pets_1
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3	pets_1
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT COUNT(*) FROM continents	car_1
SELECT COUNT(*) AS NumberOfContinents FROM car_1.continents	car_1
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumOfCountries FROM continents LEFT JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.ContId, continents.Continent	car_1
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumCountries FROM continents LEFT JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.ContId, continents.Continent	car_1
SELECT COUNT(*) AS total_countries FROM car_1.countries	car_1
SELECT COUNT(*) AS TotalCountries FROM car_1.countries	car_1
SELECT cm.Id, cm.FullName AS MakerFullName, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.Id, cm.FullName	car_1
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumModels FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName	car_1
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data) car_1
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)	car_1
SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))	car_1
SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))	car_1
SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names)) AND Id IN (SELECT Id FROM cars_data WHERE Year = 1970)	car_1
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Year = 1970	car_1
SELECT Make, Year FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data)	car_1
SELECT Maker, MIN(Year) AS Earliest_Production_Year FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId GROUP BY Maker ORDER BY Earliest_Production_Year LIMIT 1	car_1
SELECT DISTINCT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Year > 1980)	car_1
SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Year > 1980)	car_1
SELECT c.Continent, COUNT(cm.Id) AS NumberOfCarMakers FROM car_1.continents c LEFT JOIN car_1.countries co ON c.ContId = co.Continent LEFT JOIN car_1.car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent	car_1
SELECT c.Continent, COUNT(cm.Id) AS NumCarMakers FROM car_1.continents c LEFT JOIN car_1.countries co ON c.Continent = co.Continent LEFT JOIN car_1.car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent	car_1
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1	car_1
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1	car_1
SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker GROUP BY car_makers.FullName	car_1
SELECT Maker, COUNT(Model) AS Number_of_Models, Id, FullName FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY Maker, Id, FullName	car_1
SELECT c.Accelerate FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data c ON ml.ModelId = c.Id WHERE cn.Make = 'amc hornet sportabout (sw)'	car_1
SELECT Accelerate FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_names ON model_list.Maker = car_names.Make AND model_list.Model = car_names.Model WHERE car_names.Model = 'amc hornet sportabout (sw)'	car_1
SELECT COUNT(*) FROM car_makers WHERE Country = 'France'	car_1
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France'	car_1
SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.Country = 'USA'	car_1
SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'United States')	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8  AND Year = 1974	car_1
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974	car_1
SELECT Maker, Model FROM model_list	car_1
SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker	car_1
SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.Continent = cm.Country	car_1
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers)	car_1
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year	car_1
SELECT Year, AVG(Weight) AS AvgWeight, AVG(Year) AS AvgYear FROM cars_data GROUP BY Year	car_1
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3	car_1
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3	car_1
SELECT MAX(cd.Horsepower), cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 3 GROUP BY cn.Make	car_1
SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHorsepower DESC LIMIT 1	car_1
SELECT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1	car_1
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1	car_1
SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo')	car_1
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'Volvo')	car_1
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders	car_1
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders	car_1
SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT MakeId) DESC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(DISTINCT ml.ModelId) FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker WHERE cm.FullName = 'American Motor Company'	car_1
SELECT COUNT(*) AS NumberOfModels FROM model_list WHERE Maker = 'American Motor Company'	car_1
SELECT car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3	car_1
SELECT c.Id, c.Maker FROM car_makers c JOIN model_list m ON c.Maker = m.Maker GROUP BY c.Id, c.Maker HAVING COUNT(m.ModelId) > 3	car_1
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Maker LEFT JOIN car_names cn ON ml.Model = cn.Model LEFT JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR (cd.Weight > 3500 AND cd.Weight IS NOT NULL)	car_1
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Maker LEFT JOIN car_names cn ON ml.Model = cn.Model LEFT JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Weight > 3000	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Id = (SELECT car_names.MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo' ORDER BY cars_data.Accelerate ASC LIMIT 1)	car_1
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Maker WHERE cm.Maker = 'Volvo' ORDER BY c.Accelerate ASC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))	car_1
SELECT COUNT(DISTINCT c.CountryId) AS CountryCount FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2	car_1
SELECT COUNT(DISTINCT c.CountryName) AS NumberOfCountries FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) > 2	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6	car_1
SELECT ml.Model FROM model_list ml JOIN car_names cn ON ml.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1	car_1
SELECT ml.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1	car_1
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3	car_1
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders < 4 AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT MAX(MPG) AS max_mpg FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT ml.Model FROM model_list ml JOIN car_names cn ON ml.ModelId = cn.MakeId JOIN car_makers cm ON cn.Make = cm.Maker JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company'	car_1
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN car_makers cm ON cn.Make = cm.Maker JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company'	car_1
SELECT CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Country IS NULL	car_1
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryName = cm.Country WHERE cm.Country IS NULL	car_1
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.ModelId) >= 2 AND COUNT(DISTINCT cm.Maker) > 3	car_1
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.ModelId) >= 2 AND COUNT(cn.MakeId) > 3	car_1
SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country LEFT JOIN model_list ON car_makers.Maker = model_list.Maker WHERE countries.CountryId IN (SELECT CountryId FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR model_list.Model = 'fiat'	car_1
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Maker) > 3) OR CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker WHERE ml.Model = 'fiat')	car_1
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT COUNT(*) FROM airlines	flight_2
SELECT COUNT(*) AS total_airlines FROM airlines	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'	flight_2
SELECT a.City, a.Country FROM airports a WHERE a.AirportName = 'Alton'	flight_2
SELECT a.City, a.Country FROM airports a WHERE a.AirportName = 'Alton'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'	flight_2
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = 'United Airlines' AND a.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'	flight_2
SELECT airports.City, COUNT(flights.DestAirport) AS ArrivingFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY ArrivingFlights DESC LIMIT 1	flight_2
SELECT a.City, COUNT(f.DestAirport) AS DestinationCount FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY DestinationCount DESC LIMIT 1	flight_2
SELECT airports.City, COUNT(flights.FlightNo) AS DepartingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1	flight_2
SELECT SourceAirport, COUNT(*) AS frequency FROM flights GROUP BY SourceAirport ORDER BY frequency DESC LIMIT 1		flight_2
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1	flight_2
SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY DestAirport) AS combined_airports GROUP BY AirportCode ORDER BY SUM(FlightCount) LIMIT 1	flight_2
SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1	flight_2
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY flight_count ASC LIMIT 1) AS f ON a.Airline = f.Airline	flight_2
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.Airline WHERE f.SourceAirport = 'AHD'	flight_2
SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = 'AHD'	flight_2
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.Airline WHERE f.DestAirport = 'AHD'	flight_2
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Airline = f.Airline WHERE f.DestAirport = 'AHD'	flight_2
SELECT DISTINCT f.Airline FROM flights f WHERE f.SourceAirport = 'APG' AND f.Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO')	flight_2
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airlines a ON f1.Airline = a.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO'	flight_2
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Airline = f.Airline WHERE f.SourceAirport = 'CVO'  AND a.Airline NOT IN (SELECT f2.Airline FROM flights f2 WHERE f2.SourceAirport = 'APG')	flight_2
SELECT DISTINCT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO' AND f.Airline NOT IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG')	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10	flight_2
SELECT f.Airline FROM flights f GROUP BY f.Airline HAVING COUNT(f.FlightNo) >= 10	flight_2
SELECT a.Airline FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200	flight_2
SELECT a.Airline FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200	flight_2
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'	flight_2
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'	flight_2
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'	flight_2
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene')	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))	flight_2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)	flight_2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)	flight_2
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City	employee_hire_evaluation
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City	employee_hire_evaluation
SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(DISTINCT e.Employee_ID) > 1	employee_hire_evaluation
SELECT e.City FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(DISTINCT e.Employee_ID) > 1	employee_hire_evaluation
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)	employee_hire_evaluation
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop	employee_hire_evaluation
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL	employee_hire_evaluation
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL	employee_hire_evaluation
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL	employee_hire_evaluation
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL	employee_hire_evaluation
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name	employee_hire_evaluation
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name	employee_hire_evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation	employee_hire_evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000	employee_hire_evaluation
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) AS Number_of_Locations FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%' cre_Doc_Template_Mgt
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) AS Different_Templates_Count FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) AS NumberOfDifferentTemplates FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'PPT'	cre_Doc_Template_Mgt
SELECT T.Template_ID, COUNT(D.Document_ID) AS NumberOfDocuments FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID, T.Template_Type_Code ORDER BY COUNT(D.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID, T.Template_Type_Code ORDER BY COUNT(D.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code, COUNT(*) AS NumberOfTemplates FROM Templates t GROUP BY t.Template_Type_Code	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code FROM Ref_Template_Types t LEFT JOIN Templates te ON t.Template_Type_Code = te.Template_Type_Code GROUP BY t.Template_Type_Code HAVING COUNT(te.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code HAVING COUNT(t.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT DISTINCT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Code IS NULL	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT DISTINCT R.Template_Type_Description FROM Ref_Template_Types R JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID	cre_Doc_Template_Mgt
SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID	cre_Doc_Template_Mgt
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'	cre_Doc_Template_Mgt
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'	cre_Doc_Template_Mgt
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT p.Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT p.Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID	cre_Doc_Template_Mgt
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT DISTINCT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text IN ('Brazil', 'Ireland')	cre_Doc_Template_Mgt
SELECT DISTINCT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Brazil%' OR p.Paragraph_Text LIKE '%Ireland%'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM teacher	course_teach
SELECT COUNT(*) FROM teacher	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Age, Hometown FROM teacher	course_teach
SELECT Age, Hometown FROM teacher	course_teach
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'	course_teach
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'	course_teach
SELECT Name FROM teacher WHERE Age IN (32, 33)	course_teach
SELECT Name FROM teacher WHERE Age IN (32, 33)	course_teach
SELECT t.Hometown FROM teacher t ORDER BY t.Age ASC LIMIT 1	course_teach
SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher)	course_teach
SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2	course_teach
SELECT teacher.Name, course.Course FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID	course_teach
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID	course_teach
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC	course_teach
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC	course_teach
SELECT t.Name FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID WHERE c.Course = 'math'	course_teach
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'	course_teach
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	course_teach
SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	course_teach
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2	course_teach
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2	course_teach
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)	course_teach
SELECT COUNT(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4	museum_visit
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC	museum_visit
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Staff) AS Average_Num_of_Staff FROM museum WHERE Open_Year < 2009	museum_visit
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)	museum_visit
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1	museum_visit
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vt.Total_spent) DESC LIMIT 1	museum_visit
SELECT v.Museum_ID, m.Name FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.Museum_ID, m.Name ORDER BY COUNT(v.Num_of_Ticket) DESC LIMIT 1	museum_visit
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit)	museum_visit
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit	museum_visit
SELECT SUM(Total_spent) AS Total_Ticket_Expense FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1	museum_visit
SELECT v.Name FROM visitor v JOIN visit vs1 ON v.ID = vs1.visitor_ID JOIN museum m1 ON vs1.Museum_ID = m1.Museum_ID JOIN visit vs2 ON v.ID = vs2.visitor_ID JOIN museum m2 ON vs2.Museum_ID = m2.Museum_ID WHERE m1.Open_Year < 2009 AND m2.Open_Year > 2011	museum_visit
SELECT COUNT(DISTINCT v.ID) AS Num_of_Visitors FROM visitor v WHERE v.ID NOT IN (SELECT vi.visitor_ID FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2010)	museum_visit
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008	museum_visit
SELECT COUNT(player_id) AS total_players FROM wta_1.players	wta_1
SELECT COUNT(player_id) AS total_players FROM wta_1.players	wta_1
SELECT COUNT(*) AS total_matches FROM wta_1.matches	wta_1
SELECT COUNT(*) FROM wta_1.matches	wta_1
SELECT first_name, birth_date FROM wta_1.players WHERE country_code = 'USA'	wta_1
SELECT first_name, birth_date FROM wta_1.players WHERE country_code = 'USA'	wta_1
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches	wta_1
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches	wta_1
SELECT AVG(winner_rank) AS average_rank FROM matches	wta_1
SELECT AVG(winner_rank) AS average_rank FROM matches	wta_1
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches	wta_1
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches	wta_1
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM wta_1.players	wta_1
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players	wta_1
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) AS different_loser_names FROM matches	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10	wta_1
SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2	wta_1
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2	wta_1
SELECT COUNT(*) FROM wta_1.matches WHERE year = 2013 OR year = 2016	wta_1
SELECT COUNT(*) FROM wta_1.matches WHERE year IN (2013, 2016)	wta_1
SELECT p.country_code, p.first_name FROM players p WHERE p.player_id IN (SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'WTA Championships' INTERSECT SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'Australian Open')	wta_1
SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN (SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'WTA Championships' AND m.year = 'Australian Open' GROUP BY m.winner_id HAVING COUNT(DISTINCT m.tourney_name) = 2)	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date	wta_1
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date	wta_1
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)	wta_1
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(DISTINCT tours) DESC LIMIT 1)	wta_1
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1	wta_1
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches)	wta_1
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1	wta_1
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name	wta_1
SELECT first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name	wta_1
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name	wta_1
SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name	wta_1
SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code	wta_1
SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date	wta_1
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date	wta_1
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year	wta_1
SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year	wta_1
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3	wta_1
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3	wta_1
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L')	wta_1
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L'  AND tourney_name = 'WTA Championships'		wta_1
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches))	wta_1
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1	wta_1
SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand	wta_1
SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand	wta_1
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'	battle_death
SELECT name, tonnage FROM ship ORDER BY name DESC	battle_death
SELECT name, date, result FROM battle	battle_death
SELECT MAX(killed) AS max_deaths, MIN(killed) AS min_deaths FROM death	battle_death
SELECT AVG(injured) AS average_injuries FROM death	battle_death
SELECT d.id, d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 'T'	battle_death
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'	battle_death
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'	battle_death
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id WHERE d.killed > 10	battle_death
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1	battle_death
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'	battle_death
SELECT COUNT(DISTINCT result) FROM battle	battle_death
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)	battle_death
SELECT b.name, b.date FROM battle AS b JOIN ship AS s1 ON b.id = s1.lost_in_battle JOIN ship AS s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'	battle_death
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.location = 'English Channel' WHERE s.id IS NULL	battle_death
SELECT note FROM death WHERE note LIKE '%East%'	battle_death
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT COUNT(*) FROM Courses	student_transcripts_tracking
SELECT COUNT(*) FROM Courses	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'math'	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'	student_transcripts_tracking
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) AS department_count FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_program_id) AS degree_count FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering'	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering'	student_transcripts_tracking
SELECT section_name, section_description FROM Sections	student_transcripts_tracking
SELECT section_name, section_description FROM Sections	student_transcripts_tracking
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2	student_transcripts_tracking
SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT s.semester_name, s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'	student_transcripts_tracking
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1	student_transcripts_tracking
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se1 ON s.student_id = se1.student_id JOIN Student_Enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id	student_transcripts_tracking
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'	student_transcripts_tracking
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%'	student_transcripts_tracking
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT degree_program_id, degree_summary_name, COUNT(student_id) AS student_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY student_count DESC LIMIT 1	student_transcripts_tracking
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_id) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1	student_transcripts_tracking
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id	student_transcripts_tracking
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id	student_transcripts_tracking
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL	student_transcripts_tracking
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se)	student_transcripts_tracking
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2	student_transcripts_tracking
SELECT tc.transcript_id, t.transcript_date FROM Transcript_Contents tc JOIN Transcripts t ON tc.transcript_id = t.transcript_id GROUP BY tc.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students WHERE date_left IS NOT NULL)	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)	student_transcripts_tracking
SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id	student_transcripts_tracking
SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id	student_transcripts_tracking
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN (SELECT current_address_id AS address_id, COUNT(*) AS student_count FROM Students GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1) AS most_common_address ON a.address_id = most_common_address.address_id	student_transcripts_tracking
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN (SELECT current_address_id, COUNT(*) as student_count FROM Students GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1) s ON a.address_id = s.current_address_id	student_transcripts_tracking
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts	student_transcripts_tracking
SELECT AVG(CAST(transcript_date AS DATE)) AS average_transcript_date FROM Transcripts	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT COUNT(*) AS number_of_transcripts FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts	student_transcripts_tracking
SELECT student_course_id, COUNT(transcript_id) AS transcript_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY transcript_count DESC LIMIT 1	student_transcripts_tracking
SELECT sec.course_id, COUNT(DISTINCT tc.transcript_id) AS transcript_count FROM Student_Enrolment_Courses sec JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY sec.course_id ORDER BY transcript_count DESC LIMIT 1	student_transcripts_tracking
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1	student_transcripts_tracking
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1	student_transcripts_tracking
SELECT DISTINCT s.semester_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2	student_transcripts_tracking
SELECT se1.semester_id FROM Student_Enrolment se1 JOIN Degree_Programs dp1 ON se1.degree_program_id = dp1.degree_program_id JOIN Student_Enrolment se2 ON se1.semester_id = se2.semester_id JOIN Degree_Programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name LIKE '%Masters%' AND dp2.degree_summary_name LIKE '%Bachelors%' GROUP BY se1.semester_id HAVING COUNT(DISTINCT dp1.degree_summary_name) > 0  AND COUNT(DISTINCT dp2.degree_summary_name) > 0	student_transcripts_tracking
SELECT COUNT(DISTINCT current_address_id) AS different_addresses_count FROM Students	student_transcripts_tracking
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id	student_transcripts_tracking
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC	student_transcripts_tracking
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC	student_transcripts_tracking
SELECT section_id, course_id, section_name, section_description, other_details FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT s.first_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title ASC	tvshow
SELECT Title FROM Cartoon ORDER BY Title ASC	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')	tvshow
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')	tvshow
SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1	tvshow
SELECT Country, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC LIMIT 1	tvshow
SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel	tvshow
SELECT COUNT(DISTINCT series_name) AS total_series, COUNT(DISTINCT Content) AS total_contents FROM TV_Channel	tvshow
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1	tvshow
SELECT Language, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Language ORDER BY ChannelCount ASC LIMIT 1	tvshow
SELECT Language, COUNT(*) AS NumberOfTVChannels FROM TV_Channel GROUP BY Language	tvshow
SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language	tvshow
SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')	tvshow
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'	tvshow
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'	tvshow
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode FROM TV_series ORDER BY Rating DESC	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series	tvshow
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'	tvshow
SELECT t.series_name FROM TV_Channel t JOIN TV_series s ON t.id = s.Channel WHERE s.Episode = 'A Love of a Lifetime'	tvshow
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'	tvshow
SELECT Episode FROM TV_series ts JOIN TV_Channel tc ON ts.Channel = tc.id WHERE tc.series_name = 'Sky Radio'	tvshow
SELECT Directed_by, COUNT(*) AS NumberOfCartoons FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Directed_by, COUNT(*) AS Cartoon_Count FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'	tvshow
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'	tvshow
SELECT DISTINCT C.Country FROM TV_Channel C JOIN Cartoon CT ON C.id = CT.Channel WHERE CT.Written_by = 'Todd Casey'	tvshow
SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'	tvshow
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.series_name = Cartoon.Title WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL	tvshow
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL	tvshow
SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')	tvshow
SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'	tvshow
SELECT T1.id FROM TV_Channel T1 JOIN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2) T2 ON T1.Country = T2.Country	tvshow
SELECT id FROM TV_Channel GROUP BY series_name HAVING COUNT(series_name) > 2	tvshow
SELECT DISTINCT T.id FROM TV_Channel T LEFT JOIN Cartoon C ON T.id = C.Channel WHERE C.id IS NULL OR C.Directed_by != 'Ben Jones'	tvshow
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')	tvshow
SELECT DISTINCT tc.Package_Option FROM TV_Channel tc LEFT JOIN Cartoon c ON tc.id = c.Channel WHERE c.Channel IS NULL OR c.Directed_by != 'Ben Jones'	tvshow
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.id IS NULL OR Cartoon.Directed_by != 'Ben Jones'	tvshow
SELECT COUNT(*) AS NumberOfPokerPlayers FROM poker_player	poker_player
SELECT COUNT(*) FROM poker_player	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player	poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player	poker_player
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player	poker_player
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT MAX(Final_Table_Made) AS Max_Final_Tables_Made FROM poker_player WHERE Earnings < 200000	poker_player
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID	poker_player
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID	poker_player
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000	poker_player
SELECT pe.Name FROM poker_player pp JOIN people pe ON pp.People_ID = pe.People_ID WHERE pp.Earnings > 300000	poker_player
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC	poker_player
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC	poker_player
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1	poker_player
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)	poker_player
SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(p2.Height) FROM people p2 JOIN poker_player pp2 ON p2.People_ID = pp2.People_ID)	poker_player
SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.Height DESC LIMIT 1	poker_player
SELECT AVG(pp.Earnings) AS Average_Earnings FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height > 200	poker_player
SELECT AVG(pp.Earnings) AS Average_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200	poker_player
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC	poker_player
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC	poker_player
SELECT p.Nationality, COUNT(*) AS NumberOfPeople FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality	poker_player
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality	poker_player
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	poker_player
SELECT p1.Nationality FROM people p1 JOIN people p2 ON p1.Nationality = p2.Nationality AND p1.People_ID <> p2.People_ID GROUP BY p1.Nationality HAVING COUNT(DISTINCT p1.People_ID) >= 2	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2	poker_player
SELECT p.Name, p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY p.Name ASC	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name ASC	poker_player
SELECT Name FROM people WHERE Nationality <> 'Russia'	poker_player
SELECT p.Name FROM people p WHERE p.Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL	poker_player
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM people	poker_player
SELECT COUNT(DISTINCT Nationality) AS NumberOfNationalities FROM people	poker_player
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT vote_id, phone_number, state FROM VOTES	voter_1
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE	voter_1
SELECT MAX(created) AS last_created_date FROM VOTES WHERE state = 'CA'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'	voter_1
SELECT DISTINCT state, created FROM VOTES	voter_1
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2	voter_1
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1	voter_1
SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA')	voter_1
SELECT COUNT(DISTINCT c.contestant_number) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.vote_id IS NULL	voter_1
SELECT ac.area_code FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state GROUP BY ac.area_code ORDER BY COUNT(v.vote_id) DESC LIMIT 1	voter_1
SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'	voter_1
SELECT DISTINCT a.area_code FROM VOTES v1 JOIN VOTES v2 ON v1.phone_number = v2.phone_number JOIN AREA_CODE_STATE a ON v1.state = a.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'	voter_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'	world_1
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'	world_1
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'	world_1
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Region, Population FROM country WHERE Name = 'Angola'	world_1
SELECT Region, Population FROM country WHERE Name = 'Angola'	world_1
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'	world_1
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1	world_1
SELECT SUM(country.Population) AS Total_Population, MAX(country.GNP) AS Max_GNP FROM country WHERE country.Continent = 'Asia'	world_1
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia'	world_1
SELECT AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'	world_1
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'	world_1
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')	world_1
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')	world_1
SELECT Population FROM city WHERE District = 'Gelderland'	world_1
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'	world_1
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory'	world_1
SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE HeadOfState = 'President of the United States'	world_1
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT GovernmentForm) AS NumGovernmentForms FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')  AND IsOfficial = 'T'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'	world_1
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1	world_1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code, country.Name ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1	world_1
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1	world_1
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1	world_1
SELECT COUNT(DISTINCT cl1.CountryCode) AS CountryCount FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'	world_1
SELECT COUNT(DISTINCT CountryCode) AS NumberOfNations FROM countrylanguage WHERE Language IN ('English', 'Dutch')	world_1
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'	world_1
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'	world_1
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	world_1
SELECT DISTINCT c.Name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country c ON cl1.CountryCode = c.Code WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'	world_1
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'	world_1
SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')	world_1
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')	world_1
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'	world_1
SELECT DISTINCT c.Name FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'	world_1
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(cl.Percentage * c.Population / 100) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(DISTINCT c.Code) DESC LIMIT 1	world_1
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1	world_1
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1	world_1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1	world_1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1	world_1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1	world_1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F')	world_1
SELECT SUM(c.Population) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'	world_1
SELECT SUM(c.Population) AS Population FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')	world_1
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'	world_1
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE IndepYear < 1930 AND IsOfficial = 'T'	world_1
SELECT Name FROM country WHERE SurfaceArea > ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe')	world_1
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')	world_1
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')	world_1
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(ca.Population) FROM country ca WHERE ca.Continent = 'Africa')	world_1
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')	world_1
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL	world_1
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL	world_1
SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language <> 'English'	world_1
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'	world_1
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic'	world_1
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English') AND c.GovernmentForm NOT LIKE '%Republic%'	world_1
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe'  AND countrylanguage.Language = 'English'  AND countrylanguage.IsOfficial = 'F'	world_1
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'	world_1
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'	world_1
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1	world_1
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1	world_1
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3	world_1
SELECT c.Name, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2	world_1
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District	world_1
SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District	world_1
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72	world_1
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm	world_1
SELECT c.Continent, AVG(c.LifeExpectancy) AS AvgLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72	world_1
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000	world_1
SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1	world_1
SELECT c.Name AS Country, cl.Language, MAX(cl.Percentage) AS MaxPercentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY c.Name HAVING cl.Percentage = MAX(cl.Percentage)	world_1
SELECT c.CountryCode, cl.Language FROM (SELECT CountryCode, MAX(Percentage) as MaxPercentage FROM countrylanguage GROUP BY CountryCode) as cl_max JOIN countrylanguage cl ON cl.CountryCode = cl_max.CountryCode AND cl.Percentage = cl_max.MaxPercentage JOIN country c ON c.Code = cl.CountryCode	world_1
SELECT COUNT(DISTINCT cl.CountryCode) AS TotalCountries FROM countrylanguage cl JOIN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode) max_lang ON cl.CountryCode = max_lang.CountryCode AND cl.Percentage = max_lang.MaxPercentage WHERE cl.Language = 'Spanish'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = countrylanguage.CountryCode)	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' AND CountryCode = countrylanguage.CountryCode)	world_1
SELECT COUNT(*) FROM conductor	orchestra
SELECT COUNT(*) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Age ASC	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT Name FROM conductor WHERE Nationality <> 'USA'	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT AVG(Attendance) AS Average_Attendance FROM show	orchestra
SELECT AVG(Attendance) AS Average_Attendance FROM show	orchestra
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final'	orchestra
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'	orchestra
SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM conductor	orchestra
SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT conductor.Name AS Conductor_Name, orchestra.Orchestra AS Orchestra_Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID	orchestra
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008	orchestra
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company	orchestra
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company	orchestra
SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC	orchestra
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1	orchestra
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL	orchestra
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL	orchestra
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003	orchestra
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	orchestra
SELECT DISTINCT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1	orchestra
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1	orchestra
SELECT COUNT(*) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT DISTINCT grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)	network_1
SELECT grade, COUNT(*) AS number_of_highschoolers FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT H1.ID AS student_id, COUNT(F.friend_id) AS number_of_friends FROM Highschooler H1 LEFT JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.ID	network_1
SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name	network_1
SELECT H.name, COUNT(F.friend_id) AS number_of_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name	network_1
SELECT H.name, COUNT(F.friend_id) AS friend_count FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name	network_1
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name ORDER BY COUNT(F.friend_id) DESC LIMIT 1	network_1
SELECT H.name FROM Highschooler H JOIN (SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id ORDER BY friend_count DESC LIMIT 1) AS F ON H.ID = F.student_id	network_1
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.ID, H1.name HAVING COUNT(F.friend_id) >= 3	network_1
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) >= 3	network_1
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'	network_1
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle'	network_1
SELECT COUNT(*) AS number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle'	network_1
SELECT COUNT(*) AS friend_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle'	network_1
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)	network_1
SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id WHERE F.student_id IS NULL	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)	network_1
SELECT DISTINCT H.ID FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id	network_1
SELECT DISTINCT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.liked_id	network_1
SELECT DISTINCT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.liked_id	network_1
SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id	network_1
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id	network_1
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id	network_1
SELECT H.name, COUNT(L.liked_id) AS number_of_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name	network_1
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name	network_1
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name ORDER BY COUNT(L.student_id) DESC LIMIT 1	network_1
SELECT H.name FROM Highschooler H JOIN (SELECT Likes.liked_id, COUNT(*) AS like_count FROM Likes GROUP BY Likes.liked_id ORDER BY like_count DESC LIMIT 1) AS MostLiked ON H.ID = MostLiked.liked_id	network_1
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name HAVING COUNT(L.liked_id) >= 2	network_1
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(L.liked_id) >= 2	network_1
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id WHERE H1.grade > 5 GROUP BY H1.ID, H1.name HAVING COUNT(F.friend_id) >= 2	network_1
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) >= 2	network_1
SELECT COUNT(*) AS likes_count FROM Likes JOIN Highschooler ON Likes.liked_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'	network_1
SELECT COUNT(*) AS number_of_likes FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id WHERE H.name = 'Kyle'	network_1
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)	network_1
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)	network_1
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)  AND ID NOT IN (SELECT friend_id FROM Friend)	network_1
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)  AND ID NOT IN (SELECT friend_id FROM Friend)	network_1
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state	dog_kennels
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state	dog_kennels
SELECT AVG(d.age) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id	dog_kennels
SELECT AVG(d.age) AS average_age_of_treated_dogs FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id	dog_kennels
SELECT DISTINCT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR p.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)	dog_kennels
SELECT DISTINCT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR p.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)	dog_kennels
SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000	dog_kennels
SELECT DISTINCT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000	dog_kennels
SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d) UNION SELECT DISTINCT o.first_name FROM Owners o WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d)	dog_kennels
SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS names WHERE first_name NOT IN (SELECT name FROM Dogs)	dog_kennels
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL	dog_kennels
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1	dog_kennels
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1	dog_kennels
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2	dog_kennels
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2	dog_kennels
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1	dog_kennels
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1	dog_kennels
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1	dog_kennels
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT t.treatment_type_description FROM Treatment_Types t JOIN Treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2	dog_kennels
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2	dog_kennels
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id	dog_kennels
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id	dog_kennels
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code	dog_kennels
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code	dog_kennels
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code	dog_kennels
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code	dog_kennels
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id	dog_kennels
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id	dog_kennels
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)	dog_kennels
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)	dog_kennels
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'	dog_kennels
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'	dog_kennels
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id	dog_kennels
SELECT DISTINCT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id	dog_kennels
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1	dog_kennels
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1	dog_kennels
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')	dog_kennels
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) AS num_professionals FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT COUNT(d.dog_id) AS number_of_dogs_without_treatment FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT COUNT(DISTINCT o.owner_id) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL OR (d.date_arrived IS NOT NULL AND d.date_adopted IS NOT NULL AND d.date_departed IS NOT NULL)	dog_kennels
SELECT COUNT(*) AS number_of_owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id AND d.date_departed IS NULL WHERE d.dog_id IS NULL	dog_kennels
SELECT COUNT(*) FROM Professionals p WHERE NOT EXISTS (SELECT 1 FROM Treatments t WHERE t.professional_id = p.professional_id)	dog_kennels
SELECT COUNT(*) AS num_professionals FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'Y'	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'Y'	dog_kennels
SELECT AVG(age) AS average_age FROM Dogs	dog_kennels
SELECT AVG(age) AS average_age FROM Dogs	dog_kennels
SELECT MAX(age) AS oldest_dog_age FROM Dogs	dog_kennels
SELECT MAX(age) AS oldest_dog_age FROM Dogs	dog_kennels
SELECT charge_type, charge_amount FROM Charges	dog_kennels
SELECT charge_type, charge_amount FROM Charges	dog_kennels
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges	dog_kennels
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT DISTINCT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S	dog_kennels
SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code	dog_kennels
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code	dog_kennels
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code	dog_kennels
SELECT COUNT(*) FROM singer.singer	singer
SELECT COUNT(*) FROM singer.singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Birth_Year, Citizenship FROM singer.singer	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship <> 'France'	singer
SELECT Name FROM singer WHERE Citizenship <> 'French'	singer
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)	singer
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship	singer
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship	singer
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship	singer
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship	singer
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID	singer
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID	singer
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000	singer
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000	singer
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(so.Song_ID) > 1	singer
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(so.Song_ID) > 1	singer
SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name	singer
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)	singer
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955	singer
SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955	singer
SELECT COUNT(*) FROM Other_Available_Features	real_estate_properties
SELECT rft.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE oaf.feature_name = 'AirCon'	real_estate_properties
SELECT DISTINCT rpt.property_type_description FROM Properties p JOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code	real_estate_properties
SELECT property_name FROM Properties WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1	real_estate_properties