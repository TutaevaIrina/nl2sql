Gold Query: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
Gold Result: [('america', 4), ('asia', 7), ('europe', 11)]
Predicted Query: SELECT c.Continent, COUNT(DISTINCT cm.Id) AS CarMakerCount FROM continents c INNER JOIN countries co ON c.ContId = co.Continent INNER JOIN car_makers cm ON LOWER(cm.Country) = LOWER(co.CountryName) GROUP BY c.Continent
Predicted Result: []
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Gold Result: [(3,)]
Predicted Query: SELECT COUNT(DISTINCT cm.Id) AS NumberOfCarMakers FROM car_makers cm INNER JOIN countries c ON LOWER(cm.Country) = LOWER(c.CountryName) WHERE LOWER(c.CountryName) = 'france'
Predicted Result: [(0,)]
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Gold Result: [(3,)]
Predicted Query: SELECT COUNT(DISTINCT cm.Id) AS NumberOfMakers FROM car_makers cm INNER JOIN countries c ON LOWER(cm.Country) = LOWER(c.CountryName) WHERE LOWER(c.CountryName) = 'france'
Predicted Result: [(0,)]
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Gold Result: [(13,)]
Predicted Query: SELECT COUNT(DISTINCT ml.ModelId) AS NumberOfModels FROM model_list ml INNER JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.Country) = 'usa'
Predicted Result: [(0,)]
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Gold Result: [(13,)]
Predicted Query: SELECT COUNT(DISTINCT ml.ModelId) AS ModelCount FROM model_list ml INNER JOIN car_makers cm ON ml.Maker = cm.Id INNER JOIN countries c ON LOWER(cm.Country) = LOWER(c.CountryName) WHERE LOWER(c.CountryName) = 'usa'
Predicted Result: [(0,)]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Gold Result: [('france',), ('germany',)]
Predicted Query: SELECT DISTINCT LOWER(countries.CountryName) AS CountryName FROM countries INNER JOIN continents ON countries.Continent = continents.ContId INNER JOIN car_makers ON LOWER(car_makers.Country) = LOWER(countries.CountryName) WHERE LOWER(continents.Continent) = 'europe' GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) >= 3
Predicted Result: []
--------------------------------------------------------------------------------
Gold Query: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Gold Result: [('france',), ('germany',)]
Predicted Query: SELECT DISTINCT LOWER(countries.CountryName) AS CountryName FROM countries INNER JOIN car_makers ON LOWER(countries.CountryName) = LOWER(car_makers.Country) WHERE countries.Continent = (SELECT ContId FROM continents WHERE LOWER(Continent) = 'europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
Predicted Result: []
--------------------------------------------------------------------------------
Gold Query: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
Gold Result: [(6,)]
Predicted Query: SELECT Cylinders FROM cars_data WHERE Id = ( SELECT MakeId FROM car_names WHERE LOWER(Make) = 'volvo' ORDER BY Accelerate ASC LIMIT 1) LIMIT 1
Predicted Result: no such column: Accelerate
--------------------------------------------------------------------------------
Gold Query: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Gold Result: [('AirTran', 'USA')]
Predicted Query: SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY flight_count ASC LIMIT 1) AS min_flights ON a.uid = min_flights.Airline
Predicted Result: [('UAL', 'USA')]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Gold Result: [('AirTran', 'USA')]
Predicted Query: SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT f.Airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.Airline ORDER BY flight_count ASC LIMIT 1) AS min_flights ON a.uid = min_flights.Airline
Predicted Result: [('UAL', 'USA')]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Gold Result: [(25, 'PP')]
Predicted Query: SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(DISTINCT d.Document_ID) DESC LIMIT 1
Predicted Result: [(11, 'BK')]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Gold Result: [(25, 'PP')]
Predicted Query: SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(DISTINCT d.Document_ID) DESC LIMIT 1
Predicted Result: [(11, 'BK')]
--------------------------------------------------------------------------------
Gold Query: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Gold Result: [('CV',)]
Predicted Query: SELECT DISTINCT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL
Predicted Result: [('AD',), ('BK',), ('CV',), ('PP',)]
--------------------------------------------------------------------------------
Gold Query: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Gold Result: [('CV',)]
Predicted Query: SELECT DISTINCT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL
Predicted Result: [('AD',), ('BK',), ('CV',), ('PP',)]
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Gold Result: [(170,)]
Predicted Query: SELECT COUNT(DISTINCT match_num)  FROM matches  WHERE year IN (2013, 2016)
Predicted Result: [(52,)]
--------------------------------------------------------------------------------
Gold Query: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Gold Result: [('Angelique Kerber', 3715)]
Predicted Query: SELECT p.first_name, p.last_name, m.winner_rank_points FROM players p INNER JOIN matches m ON p.player_id = m.winner_id GROUP BY m.winner_id ORDER BY COUNT(m.winner_id) DESC LIMIT 1
Predicted Result: [('Angelique', 'Kerber', 3715)]
--------------------------------------------------------------------------------
Gold Query: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Gold Result: [('Angelique Kerber', 3715)]
Predicted Query: SELECT p.first_name || ' ' || p.last_name AS winner_name, r.ranking_points FROM players p INNER JOIN ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1) AS top_winner ON p.player_id = top_winner.winner_id INNER JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_date DESC LIMIT 1
Predicted Result: [('Angelique Kerber', 3156)]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Gold Result: [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]
Predicted Query: SELECT DISTINCT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2
Predicted Result: [(2, 'math'), (3, 'os'), (4, 'en'), (6, 'la'), (7, 'cal'), (9, 'dl'), (10, 'ml'), (11, 'ai'), (12, 'db'), (13, 'rs'), (15, 'oop')]
--------------------------------------------------------------------------------
Gold Query: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Gold Result: [('rs',)]
Predicted Query: SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(DISTINCT sec.student_enrolment_id) DESC LIMIT 1
Predicted Result: [('math',)]
--------------------------------------------------------------------------------
Gold Query: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Gold Result: [('rs',)]
Predicted Query: SELECT c.course_name FROM Courses c INNER JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(DISTINCT sec.student_enrolment_id) DESC LIMIT 1
Predicted Result: [('math',)]
--------------------------------------------------------------------------------
Gold Query: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Gold Result: [(4, 0)]
Predicted Query: SELECT sec.course_id, COUNT(DISTINCT tc.transcript_id) AS transcript_count FROM Student_Enrolment_Courses sec INNER JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY sec.course_id ORDER BY transcript_count DESC LIMIT 1
Predicted Result: [(6, 4)]
--------------------------------------------------------------------------------
Gold Query: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Gold Result: [('Poland',)]
Predicted Query: SELECT DISTINCT LOWER(Country) FROM TV_Channel WHERE LOWER(id) NOT IN ( SELECT DISTINCT LOWER(Channel) FROM Cartoon WHERE LOWER(Written_by) = 'todd casey')
Predicted Result: [('italy',), ('united kingdom',), ('poland',)]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Gold Result: [('MTV Dance', 'United Kingdom')]
Predicted Query: SELECT DISTINCT  LOWER(tc.series_name) AS series_name,  LOWER(tc.Country) AS country FROM  TV_Channel tc INNER JOIN  Cartoon c ON LOWER(tc.id) = LOWER(c.Channel) WHERE  LOWER(c.Directed_by) IN ('ben jones', 'michael chang')
Predicted Result: [('sky radio', 'italy'), ('music box italia', 'italy'), ('mtv hits', 'italy'), ('mtv rocks', 'united kingdom'), ('mtv dance', 'united kingdom'), ('classica', 'italy')]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
Gold Result: [(212,)]
Predicted Query: SELECT area_code FROM AREA_CODE_STATE JOIN ( SELECT SUBSTR(phone_number, 1, 3) AS area_code, COUNT(DISTINCT vote_id) AS vote_count FROM VOTES GROUP BY area_code ORDER BY vote_count DESC LIMIT 1) AS vote_counts ON AREA_CODE_STATE.area_code = vote_counts.area_code
Predicted Result: ambiguous column name: area_code
--------------------------------------------------------------------------------
Gold Query: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Gold Result: [(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]
Predicted Query: SELECT DISTINCT acs.area_code FROM VOTES v1 INNER JOIN VOTES v2 ON v1.phone_number = v2.phone_number INNER JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number INNER JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number INNER JOIN AREA_CODE_STATE acs ON v1.state = acs.state WHERE LOWER(c1.contestant_name) = 'tabatha gehling' AND LOWER(c2.contestant_name) = 'kelly clauss'
Predicted Result: []
--------------------------------------------------------------------------------
Gold Query: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Gold Result: [(510.3333333333333, 329000)]
Predicted Query: SELECT AVG(c.GNP) AS MeanGNP, SUM(c.Population) AS TotalPopulation FROM country c WHERE LOWER(c.Name) LIKE '%united states%'
Predicted Result: [(4255350.0, 278357000)]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Gold Result: [('United States',)]
Predicted Query: SELECT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1
Predicted Result: [('Canada',)]
--------------------------------------------------------------------------------
Gold Query: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Gold Result: [('United States',)]
Predicted Query: SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
Predicted Result: [('Canada',)]
--------------------------------------------------------------------------------
Gold Query: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Gold Result: [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]
Predicted Query: SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english')
Predicted Result: [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BVT',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HMD',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IOT',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SGS',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]
--------------------------------------------------------------------------------
Gold Query: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Gold Result: [('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]
Predicted Query: SELECT CountryCode FROM countrylanguage WHERE LOWER(Language) = 'spanish' ORDER BY Percentage DESC LIMIT 1
Predicted Result: [('CUB',)]
--------------------------------------------------------------------------------
Gold Query: SELECT grade FROM Highschooler
Gold Result: [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]
Predicted Query: SELECT DISTINCT grade FROM Highschooler;
Predicted Result: [(9,), (10,), (11,), (12,)]
--------------------------------------------------------------------------------
Gold Query: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Gold Result: [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]
Predicted Query: SELECT Highschooler.ID, Highschooler.name, COUNT(DISTINCT Friend.friend_id) AS friend_count FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
Predicted Result: [(1101, 'Haley', 1), (1247, 'Alexis', 2), (1304, 'Jordan', 1), (1316, 'Austin', 1), (1381, 'Tiffany', 1), (1468, 'Kris', 2), (1501, 'Jessica', 1), (1510, 'Jordan', 2), (1661, 'Logan', 1), (1689, 'Gabriel', 2), (1709, 'Cassandra', 1), (1782, 'Andrew', 3), (1911, 'Gabriel', 1), (1934, 'Kyle', 1)]
--------------------------------------------------------------------------------
Gold Query: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Gold Result: [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]
Predicted Query: SELECT H.name, COUNT(DISTINCT F.friend_id) AS number_of_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID
Predicted Result: [('John', 0), ('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Brittany', 0), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]
--------------------------------------------------------------------------------
Gold Query: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Gold Result: [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]
Predicted Query: SELECT H.name, COUNT(DISTINCT F.friend_id) AS number_of_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID
Predicted Result: [('John', 0), ('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Brittany', 0), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]
--------------------------------------------------------------------------------
Gold Query: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Gold Result: [(5.111111111111111,)]
Predicted Query: SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d INNER JOIN Treatments t ON d.dog_id = t.dog_id
Predicted Result: [(5.466666666666667,)]
--------------------------------------------------------------------------------
Gold Query: SELECT DISTINCT breed_code ,  size_code FROM dogs
Gold Result: [('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]
Predicted Query: SELECT DISTINCT b.breed_name, s.size_description FROM Breeds b CROSS JOIN Sizes s
Predicted Result: [('Eskimo', 'Small'), ('Eskimo', 'Medium'), ('Eskimo', 'Large'), ('Husky', 'Small'), ('Husky', 'Medium'), ('Husky', 'Large'), ('Bulldog', 'Small'), ('Bulldog', 'Medium'), ('Bulldog', 'Large')]
--------------------------------------------------------------------------------
Gold Query: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Gold Result: [('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)]
Predicted Query: SELECT DISTINCT property_name FROM Properties WHERE room_count > 1 AND property_type_code IN ( SELECT property_type_code FROM Ref_Property_Types WHERE LOWER(property_type_description) IN ('house', 'apartment'))
Predicted Result: []
--------------------------------------------------------------------------------
